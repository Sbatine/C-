Student Management System in C++
Introduction
This project is a simple Student Management System implemented in C++. It allows users to add, display, and remove students dynamically using structures and vectors.
Objectives
The main objectives of this project are:
- To understand the use of C++ structures (`struct`).
- To manipulate dynamic arrays using `vector`.
- To practice basic input/output operations in C++.
- To develop a simple interactive menu-driven program.
Code Explanation
The project consists of the following key components:
1. Structure (`struct Student`)
Defines a student with three attributes: ID, name, and age.
2. Vector (`vector<Student> students`)
Stores the list of students dynamically.
3. Functions
- `addStudent()`: Adds a new student to the list.
- `displayStudents()`: Displays all registered students.
- `removeStudent()`: Removes a student by ID.

4. Main Function (`main()`)
Contains an interactive menu for user interaction. The user can choose options to add, display, or remove students.
Complete C++ Code

#include <iostream>
#include <vector>
#include <string>
#include <limits>

using namespace std;

// Structure to store student information
struct Student {
    int id;
    string name;
    int age;
};

// Function to add a student to the list
void addStudent(vector<Student> &students, int id, string name, int age) {
    // Check if the ID already exists
    for (const auto &student : students) {
        if (student.id == id) {
            cout << "Error: A student with ID " << id << " already exists.\n";
            return;
        }
    }

    Student newStudent = {id, name, age};
    students.push_back(newStudent);
    cout << "Student added successfully!\n";
}

// Function to display all registered students
void displayStudents(const vector<Student> &students) {
    if (students.empty()) {
        cout << "No students registered.\n";
        return;
    }
    cout << "\nList of Students:\n";
    for (const auto &student : students) {
        cout << "ID: " << student.id << " | Name: " << student.name << " | Age: " << student.age << " years\n";
    }
}

// Function to remove a student by ID
void removeStudent(vector<Student> &students, int id) {
    for (auto it = students.begin(); it != students.end(); ++it) {
        if (it->id == id) {
            students.erase(it);
            cout << "Student removed successfully!\n";
            return;
        }
    }
    cout << "Student with ID " << id << " not found.\n";
}

// Function to read an integer and handle invalid input
int readInt() {
    int value;
    while (true) {
        cin >> value;
        if (cin.fail()) {
            cin.clear(); // Clear the error state
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a valid integer: ";
        } else {
            break;
        }
    }
    return value;
}

// Function to read a string (for names)
string readString() {
    string value;
    cin.ignore();  // Clear the input buffer before reading the string
    getline(cin, value);
    return value;
}

// Main function
int main() {
    vector<Student> students;
    int option, id, age;
    string name;

    do {
        cout << "\nMenu:\n";
        cout << "1. Add Student\n";
        cout << "2. Display Students\n";
        cout << "3. Remove Student\n";
        cout << "4. Exit\n";
        cout << "Choose an option: ";
        option = readInt();

        switch (option) {
            case 1:
                cout << "Enter Student ID: ";
                id = readInt();
                cout << "Enter Student Name: ";
                name = readString();
                cout << "Enter Student Age: ";
                age = readInt();
                addStudent(students, id, name, age);
                break;
            case 2:
                displayStudents(students);
                break;
            case 3:
                cout << "Enter Student ID to remove: ";
                id = readInt();
                removeStudent(students, id);
                break;
            case 4:
                cout << "Exiting the program...\n";
                break;
            default:
                cout << "Invalid option. Please try again.\n";
        }
    } while (option != 4);

    return 0;
}
Example Output

Menu:
1. Add Student
2. Display Students
3. Remove Student
4. Exit
Choose an option: 1
Enter Student ID: 101
Enter Student Name: John Doe
Enter Student Age: 20
Student added successfully!

Menu:
1. Add Student
2. Display Students
3. Remove Student
4. Exit
Choose an option: 2

List of Students:
ID: 101 | Name: John Doe | Age: 20 years

Menu:
1. Add Student
2. Display Students
3. Remove Student
4. Exit
Choose an option: 3
Enter Student ID to remove: 101
Student removed successfully!

Menu:
1. Add Student
2. Display Students
3. Remove Student
4. Exit
Choose an option: 4
Exiting the program...
