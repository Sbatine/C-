9. Define a class Person having name as a data member. Inherit two classes Student an Employee from Person.
Student has additional attributes as course, marks and yea and Employee has department and salary.
Write display method in all the thre classes to display the corresponding attributes. Provide the necessary methods to shov runtime polymorphism.

#include <iostream>
#include <string>
using namespace std;

class Person {
protected:
    string name;
public:
    Person(string n) : name(n) {}

    // Virtual display method for runtime polymorphism
    virtual void display() {
        cout << "Name: " << name << endl;
    }

    // Virtual destructor for proper cleanup
    virtual ~Person() {}
};

class Student : public Person {
private:
    string course;
    int marks;
    int year;
public:
    Student(string n, string c, int m, int y) : Person(n), course(c), marks(m), year(y) {}

    void display() override {
        Person::display();
        cout << "Course: " << course << endl;
        cout << "Marks: " << marks << endl;
        cout << "Year: " << year << endl;
    }
};

class Employee : public Person {
private:
    string department;
    double salary;
public:
    Employee(string n, string d, double s) : Person(n), department(d), salary(s) {}

    void display() override {
        Person::display();
        cout << "Department: " << department << endl;
        cout << "Salary: " << salary << endl;
    }
};

// Function demonstrating runtime polymorphism
void showDetails(Person* p) {
    p->display();
}

int main() {
    Student s("Alice", "Computer Science", 85, 3);
    Employee e("Bob", "HR", 50000);

    showDetails(&s);
    cout << endl;
    showDetails(&e);

    return 0;
}


OUTPUT:
Name: Alice
Course: Computer Science
Marks: 85
Year: 3

Name: Bob
Department: HR
Salary: 50000
