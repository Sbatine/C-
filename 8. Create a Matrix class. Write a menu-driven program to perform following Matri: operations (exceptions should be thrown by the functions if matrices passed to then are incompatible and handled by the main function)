

#include <iostream>
using namespace std;

class Matrix {
    int mat[10][10];
    int rows, cols;

public:
    void input() {
        cout << "Enter rows and columns: ";
        cin >> rows >> cols;
        cout << "Enter elements:\n";
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                cin >> mat[i][j];
    }

    void display() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++)
                cout << mat[i][j] << " ";
            cout << endl;
        }
    }

    Matrix add(Matrix m) {
        if (rows != m.rows || cols != m.cols)
            throw "Incompatible dimensions for addition.";
        Matrix res;
        res.rows = rows;
        res.cols = cols;
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                res.mat[i][j] = mat[i][j] + m.mat[i][j];
        return res;
    }

    Matrix multiply(Matrix m) {
        if (cols != m.rows)
            throw "Incompatible dimensions for multiplication.";
        Matrix res;
        res.rows = rows;
        res.cols = m.cols;
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < m.cols; j++) {
                res.mat[i][j] = 0;
                for (int k = 0; k < cols; k++)
                    res.mat[i][j] += mat[i][k] * m.mat[k][j];
            }
        return res;
    }

    Matrix transpose() {
        Matrix res;
        res.rows = cols;
        res.cols = rows;
        for (int i = 0; i < rows; i++)
            for (int j = 0; j < cols; j++)
                res.mat[j][i] = mat[i][j];
        return res;
    }
};

int main() {
    try {
        Matrix m1, m2, result;
        cout << "Matrix 1:\n";
        m1.input();

        cout << "Matrix 2:\n";
        m2.input();

        cout << "\nSum:\n";
        result = m1.add(m2);
        result.display();

        cout << "\nProduct:\n";
        result = m1.multiply(m2);
        result.display();

        cout << "\nTranspose of Matrix 1:\n";
        result = m1.transpose();
        result.display();
    } catch (const char *e) {
        cout << "Error: " << e << endl;
    }
    return 0;
}

OUTPUT:

Matrix 1:
Enter rows and columns: 2 2
Enter elements:
1 2
3 4
Matrix 2:
Enter rows and columns: 2 2
Enter elements:
5 6
7 8

Sum:
6 8
10 12

Product:
19 22
43 50

Transpose of Matrix 1:
1 3
2 4

